//2116. Check if a Parentheses String Can Be Valid

class Solution {
    public boolean canBeValid(String s, String locked) {
        if(s.length()%2!=0) return false;
        Stack<Integer> lock=new Stack<>();
        Stack<Integer> unlock=new Stack<>();
        for(int i=0;i<s.length();i++){
            if(locked.charAt(i)=='1'){
                if(s.charAt(i)==')'){
                    if(!lock.empty())
                        lock.pop();
                    else if(!unlock.empty()){
                        unlock.pop();
                    }
                    else 
                        return false;
                }  
                else    
                    lock.push(i);
            }
            else
                unlock.push(i);    
        }

        while(!lock.empty()&& !unlock.empty()){
            int open=lock.pop();
            int close=unlock.pop();
            if(open>close) return false;
        }
        if(!lock.empty()) 
            return false;   
        return true;
    }
}

//sol 2 greedy

class Solution {
    public boolean canBeValid(String s, String locked) {
        int open=0;
        int close=0;
        if(s.length()%2!=0) return false;
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)=='(' || locked.charAt(i)=='0') open++;
            else open--;
            if(open<0) return false;
        }
        for(int i=s.length()-1;i>=0;i--){
            if(s.charAt(i)==')' || locked.charAt(i)=='0') close++;
            else close--;
            if(close<0) return false;
            
        }
        return true;
    }
}