//347. Top K Frequent Elements

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        HashMap<Integer,Integer> mp=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            mp.put(nums[i],mp.getOrDefault(nums[i],0)+1);
        }
        List<Map.Entry<Integer,Integer>>hs=new LinkedList<>(mp.entrySet());

        Collections.sort(hs,(a,b) -> 
        //{
            // if(a.get().compareTo(b.get()))
                // return a.get().compareTo(b.get());    
                 b.getValue().compareTo(a.getValue())
        //}
        );
        int count=0;
        int ans[]=new int[k];
        for(Map.Entry<Integer,Integer> ls: hs){
            if(count<k)
            ans[count++]=ls.getKey();
        }
       return ans;
    }
    //     Stack<Integer>s=new Stack<>();
    //     int count=1;
    //     int prev=nums[0];
    //     for(int i=1;i<nums.length;i++){
    //         if(nums[i]==prev) {
    //             count++;
    //         }
    //         else{
    //             if(s.peek()>)
    //             count=1;
    //         }
    //         prev=nums[i];
    //     }
    // }
}